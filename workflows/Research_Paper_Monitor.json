{
  "name": "Research Paper Monitor",
  "nodes": [
    {
      "parameters": {
        "rule": {
          "interval": [
            {
              "field": "hours",
              "hoursInterval": 6
            }
          ]
        }
      },
      "type": "n8n-nodes-base.scheduleTrigger",
      "typeVersion": 1.2,
      "position": [
        0,
        0
      ],
      "id": "schedule-trigger",
      "name": "Schedule Trigger"
    },
    {
      "parameters": {
        "url": "http://export.arxiv.org/api/query",
        "options": {
          "queryParameters": {
            "parameters": [
              {
                "name": "search_query",
                "value": "cat:cs.AI OR cat:cs.CL OR cat:cs.LG"
              },
              {
                "name": "start",
                "value": "0"
              },
              {
                "name": "max_results",
                "value": "20"
              },
              {
                "name": "sortBy",
                "value": "submittedDate"
              },
              {
                "name": "sortOrder",
                "value": "descending"
              }
            ]
          }
        }
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        200,
        0
      ],
      "id": "arxiv-watcher",
      "name": "ArXiv Topic Watcher"
    },
    {
      "parameters": {
        "url": "https://api.semanticscholar.org/graph/v1/paper/search",
        "options": {
          "queryParameters": {
            "parameters": [
              {
                "name": "query",
                "value": "artificial intelligence machine learning"
              },
              {
                "name": "limit",
                "value": "10"
              },
              {
                "name": "fields",
                "value": "paperId,title,abstract,authors,year,url,openAccessPdf"
              }
            ]
          }
        }
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        200,
        200
      ],
      "id": "semantic-scholar-watcher",
      "name": "Semantic Scholar Watcher"
    },
    {
      "parameters": {
        "url": "https://api.biorxiv.org/details/biorxiv/2024-01-01/2024-12-31",
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        200,
        400
      ],
      "id": "biorxiv-watcher",
      "name": "bioRxiv Watcher"
    },
    {
      "parameters": {
        "jsCode": "// Parse ArXiv XML response\nif (items[0].xml) {\n  const xml2js = require('xml2js');\n  const parser = new xml2js.Parser();\n  \n  return new Promise((resolve) => {\n    parser.parseString(items[0].xml, (err, result) => {\n      if (err) {\n        resolve([{json: {error: 'Failed to parse XML'}}]);\n        return;\n      }\n      \n      const entries = result.feed?.entry || [];\n      const papers = entries.map(entry => ({\n        title: entry.title?.[0] || '',\n        abstract: entry.summary?.[0] || '',\n        authors: entry.author?.map(a => a.name?.[0]).join(', ') || '',\n        published: entry.published?.[0] || '',\n        pdf_url: entry.link?.find(l => l.$.type === 'application/pdf')?.$.href || '',\n        source: 'arxiv'\n      }));\n      \n      resolve(papers.map(paper => ({json: paper})));\n    });\n  });\n}\n\nreturn items;"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        400,
        0
      ],
      "id": "arxiv-parser",
      "name": "ArXiv Parser"
    },
    {
      "parameters": {
        "jsCode": "// Parse Semantic Scholar response\nif (items[0].json?.data) {\n  const papers = items[0].json.data.map(paper => ({\n    title: paper.title || '',\n    abstract: paper.abstract || '',\n    authors: paper.authors?.map(a => a.name).join(', ') || '',\n    published: paper.year?.toString() || '',\n    pdf_url: paper.openAccessPdf?.url || paper.url || '',\n    source: 'semantic_scholar'\n  }));\n  \n  return papers.map(paper => ({json: paper}));\n}\n\nreturn items;"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        400,
        200
      ],
      "id": "semantic-scholar-parser",
      "name": "Semantic Scholar Parser"
    },
    {
      "parameters": {
        "jsCode": "// Parse bioRxiv response\nif (items[0].json?.collection) {\n  const papers = items[0].json.collection.slice(0, 10).map(paper => ({\n    title: paper.title || '',\n    abstract: paper.abstract || '',\n    authors: paper.authors || '',\n    published: paper.date || '',\n    pdf_url: `https://www.biorxiv.org/content/10.1101/${paper.doi}v${paper.version}.full.pdf`,\n    source: 'biorxiv'\n  }));\n  \n  return papers.map(paper => ({json: paper}));\n}\n\nreturn items;"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        400,
        400
      ],
      "id": "biorxiv-parser",
      "name": "bioRxiv Parser"
    },
    {
      "parameters": {},
      "type": "n8n-nodes-base.merge",
      "typeVersion": 2.1,
      "position": [
        600,
        200
      ],
      "id": "merge-papers",
      "name": "Merge Papers"
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 2
          },
          "conditions": [
            {
              "id": "filter-condition",
              "leftValue": "={{ $json.pdf_url }}",
              "rightValue": "",
              "operator": {
                "type": "string",
                "operation": "isNotEmpty"
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.2,
      "position": [
        800,
        200
      ],
      "id": "filter-papers",
      "name": "Filter Papers with PDFs"
    },
    {
      "parameters": {
        "url": "={{ $json.pdf_url }}",
        "options": {
          "response": {
            "response": {
              "responseFormat": "file"
            }
          }
        }
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        1000,
        100
      ],
      "id": "pdf-fetcher",
      "name": "PDF Fetcher"
    },
    {
      "parameters": {
        "url": "http://localhost:8070/api/processFulltextDocument",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "Content-Type",
              "value": "multipart/form-data"
            }
          ]
        },
        "sendBody": true,
        "bodyParameters": {
          "parameters": [
            {
              "name": "input",
              "value": "={{ $binary.data }}"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        1200,
        100
      ],
      "id": "grobid-extractor",
      "name": "GROBID Text Extractor"
    },
    {
      "parameters": {
        "jsCode": "// Fallback text extraction using simple PDF parsing\nconst pdf = require('pdf-parse');\n\nif (items[0].binary?.data) {\n  try {\n    const data = await pdf(Buffer.from(items[0].binary.data, 'base64'));\n    return [{\n      json: {\n        ...items[0].json,\n        extracted_text: data.text.substring(0, 5000) // Limit to 5000 chars\n      }\n    }];\n  } catch (error) {\n    return [{\n      json: {\n        ...items[0].json,\n        extracted_text: items[0].json.abstract || 'Could not extract text from PDF',\n        extraction_error: error.message\n      }\n    }];\n  }\n}\n\nreturn items;"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        1200,
        300
      ],
      "id": "fallback-extractor",
      "name": "Fallback PDF Parser"
    },
    {
      "parameters": {
        "resource": "text",
        "operation": "message",
        "model": "gpt-4",
        "messages": {
          "values": [
            {
              "role": "system",
              "content": "You are a research paper summarizer. Create a concise, structured summary of the given research paper. Include: 1) Main contribution, 2) Key methods, 3) Results/findings, 4) Significance. Keep it under 300 words."
            },
            {
              "role": "user",
              "content": "=Title: {{ $json.title }}\n\nAbstract: {{ $json.abstract }}\n\nExtracted Text: {{ $json.extracted_text || $json.abstract }}"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.openAi",
      "typeVersion": 1.3,
      "position": [
        1400,
        200
      ],
      "id": "openai-summarizer",
      "name": "OpenAI Summarizer",
      "credentials": {
        "openAiApi": {
          "id": "openai-creds",
          "name": "OpenAI API"
        }
      }
    },
    {
      "parameters": {
        "operation": "appendToDatabase",
        "databaseId": "{{ $vars.NOTION_DATABASE_ID }}",
        "properties": {
          "values": [
            {
              "key": "Title",
              "type": "title",
              "title": "={{ $json.title }}"
            },
            {
              "key": "Authors",
              "type": "richText",
              "richText": "={{ $json.authors }}"
            },
            {
              "key": "Source",
              "type": "select",
              "select": "={{ $json.source }}"
            },
            {
              "key": "Published",
              "type": "date",
              "date": "={{ $json.published }}"
            },
            {
              "key": "Summary",
              "type": "richText",
              "richText": "={{ $('OpenAI Summarizer').item.json.choices[0].message.content }}"
            },
            {
              "key": "PDF URL",
              "type": "url",
              "url": "={{ $json.pdf_url }}"
            }
          ]
        }
      },
      "type": "n8n-nodes-base.notion",
      "typeVersion": 2.2,
      "position": [
        1600,
        100
      ],
      "id": "notion-output",
      "name": "Notion Database",
      "credentials": {
        "notionApi": {
          "id": "notion-creds",
          "name": "Notion API"
        }
      }
    },
    {
      "parameters": {
        "chatId": "{{ $vars.TELEGRAM_CHAT_ID }}",
        "text": "📄 *New Research Paper*\n\n*{{ $json.title }}*\n\n👥 Authors: {{ $json.authors }}\n📅 Published: {{ $json.published }}\n🔍 Source: {{ $json.source }}\n\n📝 *Summary:*\n{{ $('OpenAI Summarizer').item.json.choices[0].message.content }}\n\n🔗 [Read PDF]({{ $json.pdf_url }})",
        "additionalFields": {
          "parse_mode": "Markdown"
        }
      },
      "type": "n8n-nodes-base.telegram",
      "typeVersion": 1.2,
      "position": [
        1600,
        200
      ],
      "id": "telegram-output",
      "name": "Telegram Notification",
      "credentials": {
        "telegramApi": {
          "id": "telegram-creds",
          "name": "Telegram API"
        }
      }
    },
    {
      "parameters": {
        "to": "{{ $vars.EMAIL_RECIPIENT }}",
        "subject": "New Research Paper: {{ $json.title }}",
        "emailFormat": "html",
        "message": "<h2>{{ $json.title }}</h2>\n<p><strong>Authors:</strong> {{ $json.authors }}</p>\n<p><strong>Published:</strong> {{ $json.published }}</p>\n<p><strong>Source:</strong> {{ $json.source }}</p>\n\n<h3>Summary:</h3>\n<p>{{ $('OpenAI Summarizer').item.json.choices[0].message.content }}</p>\n\n<p><a href=\"{{ $json.pdf_url }}\">Read Full Paper</a></p>",
        "options": {}
      },
      "type": "n8n-nodes-base.emailSend",
      "typeVersion": 2.1,
      "position": [
        1600,
        300
      ],
      "id": "email-output",
      "name": "Email Notification",
      "credentials": {
        "smtp": {
          "id": "email-creds",
          "name": "Email SMTP"
        }
      }
    }
  ],
  "pinData": {},
  "connections": {
    "Schedule Trigger": {
      "main": [
        [
          {
            "node": "ArXiv Topic Watcher",
            "type": "main",
            "index": 0
          },
          {
            "node": "Semantic Scholar Watcher",
            "type": "main",
            "index": 0
          },
          {
            "node": "bioRxiv Watcher",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "ArXiv Topic Watcher": {
      "main": [
        [
          {
            "node": "ArXiv Parser",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Semantic Scholar Watcher": {
      "main": [
        [
          {
            "node": "Semantic Scholar Parser",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "bioRxiv Watcher": {
      "main": [
        [
          {
            "node": "bioRxiv Parser",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "ArXiv Parser": {
      "main": [
        [
          {
            "node": "Merge Papers",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Semantic Scholar Parser": {
      "main": [
        [
          {
            "node": "Merge Papers",
            "type": "main",
            "index": 1
          }
        ]
      ]
    },
    "bioRxiv Parser": {
      "main": [
        [
          {
            "node": "Merge Papers",
            "type": "main",
            "index": 2
          }
        ]
      ]
    },
    "Merge Papers": {
      "main": [
        [
          {
            "node": "Filter Papers with PDFs",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Filter Papers with PDFs": {
      "main": [
        [
          {
            "node": "PDF Fetcher",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "OpenAI Summarizer",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "PDF Fetcher": {
      "main": [
        [
          {
            "node": "GROBID Text Extractor",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "GROBID Text Extractor": {
      "main": [
        [
          {
            "node": "OpenAI Summarizer",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Fallback PDF Parser": {
      "main": [
        [
          {
            "node": "OpenAI Summarizer",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "OpenAI Summarizer": {
      "main": [
        [
          {
            "node": "Notion Database",
            "type": "main",
            "index": 0
          },
          {
            "node": "Telegram Notification",
            "type": "main",
            "index": 0
          },
          {
            "node": "Email Notification",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "active": false,
  "settings": {
    "executionOrder": "v1"
  },
  "versionId": "research-paper-monitor-v1",
  "meta": {
    "templateCredsSetupCompleted": false
  },
  "id": "research-paper-monitor",
  "tags": ["research", "automation", "ai"]
} 